<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_box</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_entity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Inherit obj_entity's variables
event_inherited();


// Movement ///////////////////////////////////////////////////////////////////

// Multiplier
m = 0.75;

groundAccel = 1.0  * m;
groundFric  = 0.6  * m;
airAccel    = 0.3 * m;
airFric     = 0.05  * m;
vxMax       = 10.0  * m; //Max speed from running
vyMax       = 10.0 * m;  //Max speed from gravity
jumpHeight  = 8.0  * m;
gravNorm    = 0.45  * m;
gravSlide   = 1.0 * m;  //Constant

clingTime   = 2.0 * room_speed;

// Misc ///////////////////////////////////////////////////////////////////////

// Relative collision checks
cLeft  = place_meeting(x - 1, y, obj_solid);
cRight = place_meeting(x + 1, y, obj_solid);
canStick = true;
sticking = false;
psticking = false;

// Common calculation
sqrt2 = sqrt(2);

// Action booleans
var left = false;
var right = false;
var up = false;
var down = false;
var jump = false;
var jumpRelease = false;
var basic = false;
var special = false;
var facingLeft = true;

// Timers
invulnerable = 0;
stunned = 0;

//Respawning
y = 0;
quart = room_width/4
x = random_range(quart, 3*quart);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End of wall cling boop
if(cLeft) {
    vx += groundAccel;
} else {
    vx -= groundAccel;
}

canStick = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if outside arena

tooFar = 100;
if(x &gt; room_width + tooFar || x &lt; -tooFar) {
    instance_destroy()
}

if(y &gt; room_height + tooFar || y &lt; -tooFar) {
    instance_destroy();
}

psticking = sticking;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//pre frame variable updates

cLeft  = place_meeting(x - 1, y, obj_solid);
cRight = place_meeting(x + 1, y, obj_solid);

if (isStunned()) {
    stunned -= 1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Input //////////////////////////////////////////////////////////////////////

var tempAccel, tempFric;
/*
kLeft        = keyboard_check(vk_left);
kRight       = keyboard_check(vk_right);
kUp          = keyboard_check(vk_up);
kDown        = keyboard_check(vk_down);

kJump        = keyboard_check_pressed(ord('Z'));
kJumpRelease = keyboard_check_released(ord('Z'));
*/
// Movement ///////////////////////////////////////////////////////////////////

// Apply the correct form of acceleration and friction
if (onGround) {
    tempAccel = groundAccel;
    tempFric  = groundFric;
} else {
    tempAccel = airAccel;
    tempFric  = airFric;
}

// Reset wall cling
if (onGround) {
    canStick = true;
}

if (sticking &amp;&amp; !((cRight /*&amp;&amp; right*/) || (cLeft /*&amp;&amp; left*/))) {
    alarm[0] = -1;
    sticking = false;  
}

// Cling to wall
if (((cRight /*&amp;&amp; right*/) || (cLeft /*&amp;&amp; left*/)) &amp;&amp; canStick &amp;&amp; !onGround &amp;&amp; !down) {
    sticking = true;
    if (!psticking) {
        alarm[0] = clingTime;
        vy = 0;
    }
}

if (sticking &amp;&amp; down) {
    alarm[0] = -1;
    event_perform(ev_alarm, 0);
}

// Handle gravity
if (!onGround) {
    if (sticking &amp;&amp; vy &gt;= 0) { //((cRight) || (cLeft)) &amp;&amp; vy &gt;= 0
        // Wall slide
        vy = gravSlide;
    } else {
        // Fall normally
        vy = Approach(vy, vyMax, gravNorm);
    }
}

// Left 
if (left &amp;&amp; !right &amp;&amp; !sticking &amp;&amp; !isStunned()) {
    // Apply acceleration left
    if (vx &gt; 0)
        vx = Approach(vx, 0, tempFric);
    vx = Approach(vx, -vxMax, tempAccel);
}

// Right 
if (right &amp;&amp; !left &amp;&amp; !sticking &amp;&amp; !isStunned()) {
    // Apply acceleration right
    if (vx &lt; 0)
        vx = Approach(vx, 0, tempFric);
    vx = Approach(vx, vxMax, tempAccel);
}

// Friction
if (!right &amp;&amp; !left)
    vx = Approach(vx, 0, tempFric); 
        
// Wall jump
if (jump &amp;&amp; cLeft &amp;&amp; sticking &amp;&amp; !onGround &amp;&amp; !isStunned()) {
    //if holding left
    //vy = -jumpHeight * 1.1;
    //vx =  jumpHeight * .75;
    vy = -jumpHeight * 1.1;
    vx =  vxMax;
}

if (jump &amp;&amp; cRight &amp;&amp; sticking &amp;&amp; !onGround &amp;&amp; !isStunned()) {
    //if holding right
    //vy = -jumpHeight * 1.1;
    //vx = -jumpHeight * .75;
    vy = -jumpHeight * 1.1;
    vx = -vxMax;
}
 
// Jump 
if (jump &amp;&amp; !isStunned()) { 
    if (onGround)
        vy = -jumpHeight;
    // Variable jumping
} else if (jumpRelease &amp;&amp; !isStunned()) { 
    if (vy &lt; 0)
        vy *= 0.25;
}

if(basic &amp;&amp; !isStunned()) {
    event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>special</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>basic</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
